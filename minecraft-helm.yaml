# These are value overrides for the helm chart defined here
# https://artifacthub.io/packages/helm/minecraft-server-charts/minecraft

# It contains the most common parameters, but for even more settings, see
# https://github.com/itzg/minecraft-server-charts/blob/master/charts/minecraft/values.yaml

# to use this file execute the following two commands
# helm repo add minecraft-server-charts https://itzg.github.io/minecraft-server-charts/
# helm upgrade --install RELEASE_NAME -f THIS_FILE.yaml --set minecraftServer.eula=true,rcon.password=YOUR_PWD minecraft-server-charts/minecraft


# Common minecraft server settings
minecraftServer:
  # may be SNAPSHOT or a specific version number
  version: LATEST
  # allowed players' names comma separated, leave blank to allow any players
  whitelist:
  # comma separated admin players' names
  ops:
  # always set game mode when a player connects
  forcegameMode: true
  # choose a seed for the starting world
  levelSeed:
  # size of the world in blocks radius from spawn point (default is 29999984)
  maxWorldSize: 10000
  # default game mode for players creative,adventure,survival or spectator
  gameMode: creative
  # message in the launcher
  motd: "Welcome to Minecraft on Kubernetes"
  # player vs player enabled
  pvp: false
  # REQUIRED this means you get the node IP address (with default K3s loadbalancer)
  serviceType: LoadBalancer
  # restore the world from a backup on first execution (requires NFS volume - see below)
  downloadWorldUrl:
  # external port must be unique across all mc server instances on a given node
  servicePort: 30100
  # how far from the player are chunks rendered on the server
  # 10 is default, larger is nice on high spec hardware
  # I believe 25 is the client max so larger is wasted
  viewDistance: 10

  rcon:
    # enable rcon for remote control - set to false if not required
    enabled: true
    # external port must be unique across all mc server instances
    port: 30101
    password: "TODO - supply this as an override on the command line "

# UNCOMMENT and supply an NFS mounted folder if you have backups of minecraft server
# worlds that you would like to use as the starting point for the new server
# extraVolumes:
#   # define where the volume mounts in the container
#   - volumeMounts:
#       - name: bigdisk
#         mountPath: /mnt/bigdisk
#         readOnly: true
#     # define the remote nfs mount to attach to above
#     volumes:
#       - name: bigdisk
#         nfs:
#           server: 192.168.86.32
#           path: /mnt/bigdisk

extraEnv:
  # recommended rolling logs for saving disk
  ENABLE_ROLLING_LOGS: true
  # if this is true then minecraftServer properties above are always applied
  # on every restart, if false they only apply at first run
  OVERRIDE_SERVER_PROPERTIES: true
  # if this is true then downloadWorldUrl is always loaded on restart
  # useful for resetting the world but should be reset to false afterwards
  # WARNING: setting this to true deletes your previous world data
  FORCE_WORLD_COPY: false

# required to save the world in persistant local-path storage (k3s default Storage Class)
# by defualt this goes in /var/lib/rancher/k3s/storage on the executing node.
# NOTE this ties the deployment to the first node it spins up on,
# we could perhaps use an NFS mount to avoid this
persistence:
  annotations: {}
  dataDir:
    enabled: true
    Size: 1Gi

# UNCOMMENT to choose which node to run on
# nodeSelector:
#   kubernetes.io/hostname: my-worker-node-name
